import { sequelize, Article } from '../../sql';

describe('Sql', () => {
  describe('Article', () => {
    describe('Model', () => {
      it('should be a model', () => {
        expect(Article.name).toBe('article');
        expect(Article.tableName).toBe('articles');

        expect(Article.attributes.id.primaryKey).toBe(true);
        expect(Article.attributes.id.defaultValue).toBeDefined();

        [
          'title',
          'description',
          'summary',
          'link',
          'originalLink',
          'permalink',
          'articleUpdatedAt',
          'articlePublishedAt',
          'author',
          'guid',
          'comments',
          'image',
          'categories',
        ].forEach(field => expect(Article.attributes[field].fieldName).toBe(field));

        expect(Article.attributes.createdAt.allowNull).toBe(false);
        // eslint-disable-next-line no-underscore-dangle
        expect(Article.attributes.createdAt._autoGenerated).toBe(true);

        expect(Article.attributes.updatedAt.allowNull).toBe(false);
        // eslint-disable-next-line no-underscore-dangle
        expect(Article.attributes.updatedAt._autoGenerated).toBe(true);

        expect(Article._timestampAttributes.createdAt).toBe('createdAt'); // eslint-disable-line no-underscore-dangle
        expect(Article._timestampAttributes.updatedAt).toBe('updatedAt'); // eslint-disable-line no-underscore-dangle

        expect(Article.associations.feed).toBeDefined();
      });
    });

    describe('Instance', () => {
      beforeEach(() => sequelize.sync({ force: true }));

      const validUrl = 'https://www.google.com';
      const invalidUrl = 'aaa';

      describe('Validation', () => {
        ['link', 'originalLink', 'permalink', 'comments', 'image'].forEach((urlField) => {
          const validFields = { [urlField]: validUrl };
          const invalidFields = { [urlField]: invalidUrl };

          it(`"${urlField}" should be a valid URL`, () => Article.create(validFields)
            .then(article => expect(article.id).toBeDefined())
            .then(() => Article.create(invalidFields))
            .then(() => { throw new Error('Invalid test'); })
            .catch((err) => {
              expect(err).toBeDefined();
              expect(err.name).toBe('SequelizeValidationError');
              expect(err.errors[0].path).toBe(urlField);
            }));
        });
      });
    });
  });
});
