import { sequelize, Set, SetI18N } from '../../sql';

describe('Sql', () => {
  describe('Set', () => {
    describe('Model', () => {
      it('should be a model', () => {
        expect(Set.name).toBe('set');
        expect(Set.tableName).toBe('sets');

        expect(Set.attributes.code.primaryKey).toBe(true);
        expect(Set.attributes.code.allowNull).toBe(false);

        expect(Set.attributes.createdAt.allowNull).toBe(false);
        // eslint-disable-next-line no-underscore-dangle
        expect(Set.attributes.createdAt._autoGenerated).toBe(true);

        expect(Set.attributes.updatedAt.allowNull).toBe(false);
        // eslint-disable-next-line no-underscore-dangle
        expect(Set.attributes.updatedAt._autoGenerated).toBe(true);

        expect(Set._timestampAttributes.createdAt).toBe('createdAt'); // eslint-disable-line no-underscore-dangle
        expect(Set._timestampAttributes.updatedAt).toBe('updatedAt'); // eslint-disable-line no-underscore-dangle

        expect(Set.associations.i18n).toBeDefined();
      });

      it('should be an international model', () => {
        expect(SetI18N.name).toBe('set-i18n');
        expect(SetI18N.tableName).toBe('sets-i18n');

        expect(SetI18N.attributes.id.primaryKey).toBe(true);
        expect(SetI18N.attributes.id.defaultValue).toBeDefined();

        expect(SetI18N.attributes.language.fieldName).toBe('language');
        expect(SetI18N.attributes.language.type.options.length).toBe(2);

        expect(SetI18N.attributes.name.fieldName).toBe('name');

        expect(SetI18N.attributes.createdAt.allowNull).toBe(false);
        // eslint-disable-next-line no-underscore-dangle
        expect(SetI18N.attributes.createdAt._autoGenerated).toBe(true);

        expect(SetI18N.attributes.updatedAt.allowNull).toBe(false);
        // eslint-disable-next-line no-underscore-dangle
        expect(SetI18N.attributes.updatedAt._autoGenerated).toBe(true);

        expect(SetI18N._timestampAttributes.createdAt).toBe('createdAt'); // eslint-disable-line no-underscore-dangle
        expect(SetI18N._timestampAttributes.updatedAt).toBe('updatedAt'); // eslint-disable-line no-underscore-dangle

        expect(SetI18N.associations.set).toBeDefined();
      });
    });

    describe('Instance', () => {
      const code = 'aaa';

      const language = 'en';
      const name = 'Set 1';

      beforeEach(() => sequelize.sync({ force: true })
        .then(() => Set.create({ code, i18n: [{ language, name }] }, { include: [{ model: SetI18N, as: 'i18n' }] })));

      it('should be an instance of Set', () => Set.findOne({ where: { code } })
        .then((set) => {
          expect(set.dataValues).toBeInstanceOf(Object);
          expect(set.isNewRecord).toBe(false);


          expect(set.code).toBe(code);
          expect(set.createdAt).toBeInstanceOf(Date);
          expect(set.updatedAt).toBeInstanceOf(Date);
        }));

      it('should retrieve 1 set', () => Set.findAll()
        .then((sets) => {
          expect(sets).toHaveLength(1);

          const [set] = sets;
          expect(set.code).toBe(code);
        }));

      it('should have 1 SetI18N', () => Set.findOne({ where: { code }, include: [{ model: SetI18N, as: 'i18n' }] })
        .then((set) => {
          expect(set.i18n).toHaveLength(1);

          const [i18n] = set.i18n;
          expect(i18n.language).toBe(language);
          expect(i18n.name).toBe(name);
        }));

      it('should have i18n shortcut', () => Set.findOne({ where: { code }, include: [{ model: SetI18N, as: 'i18n' }] })
        .then(set => expect(set.getName(language)).toBe(name) || expect(set.getName('fr')).toBeNull()));
    });
  });
});
