import { sequelize, Card, CardI18N } from '../../sql';

describe('Sql', () => {
  describe('Card', () => {
    describe('Model', () => {
      it('should be a model', () => {
        expect(Card.name).toBe('card');
        expect(Card.tableName).toBe('cards');

        expect(Card.attributes.id.primaryKey).toBe(true);
        expect(Card.attributes.id.defaultValue).toBeDefined();

        expect(Card.attributes.index.allowNull).toBe(false);

        expect(Card.attributes.power.fieldName).toBe('power');
        expect(Card.attributes.toughness.fieldName).toBe('toughness');
        expect(Card.attributes.loyalty.fieldName).toBe('loyalty');
        expect(Card.attributes.mana.fieldName).toBe('mana');
        expect(Card.attributes.rarity.fieldName).toBe('rarity');
        expect(Card.attributes.artist.fieldName).toBe('artist');

        expect(Card.attributes.createdAt.allowNull).toBe(false);
        // eslint-disable-next-line no-underscore-dangle
        expect(Card.attributes.createdAt._autoGenerated).toBe(true);

        expect(Card.attributes.updatedAt.allowNull).toBe(false);
        // eslint-disable-next-line no-underscore-dangle
        expect(Card.attributes.updatedAt._autoGenerated).toBe(true);

        expect(Card._timestampAttributes.createdAt).toBe('createdAt'); // eslint-disable-line no-underscore-dangle
        expect(Card._timestampAttributes.updatedAt).toBe('updatedAt'); // eslint-disable-line no-underscore-dangle

        expect(Card.associations.i18n).toBeDefined();
      });

      it('should be an international model', () => {
        expect(CardI18N.name).toBe('card-i18n');
        expect(CardI18N.tableName).toBe('cards-i18n');

        expect(CardI18N.attributes.id.primaryKey).toBe(true);
        expect(CardI18N.attributes.id.defaultValue).toBeDefined();

        expect(CardI18N.attributes.language.fieldName).toBe('language');
        expect(CardI18N.attributes.language.type.options.length).toBe(2);

        expect(CardI18N.attributes.name.fieldName).toBe('name');
        expect(CardI18N.attributes.typeStr.fieldName).toBe('typeStr');

        expect(CardI18N.attributes.createdAt.allowNull).toBe(false);
        // eslint-disable-next-line no-underscore-dangle
        expect(CardI18N.attributes.createdAt._autoGenerated).toBe(true);

        expect(CardI18N.attributes.updatedAt.allowNull).toBe(false);
        // eslint-disable-next-line no-underscore-dangle
        expect(CardI18N.attributes.updatedAt._autoGenerated).toBe(true);

        expect(CardI18N._timestampAttributes.createdAt).toBe('createdAt'); // eslint-disable-line no-underscore-dangle
        expect(CardI18N._timestampAttributes.updatedAt).toBe('updatedAt'); // eslint-disable-line no-underscore-dangle

        expect(CardI18N.associations.card).toBeDefined();
      });
    });

    describe('Instance', () => {
      const index = 4;

      const language = 'en';
      const name = 'Card 1';
      const typeStr = 'typeStr';

      beforeEach(() => sequelize.sync({ force: true })
        .then(() => Card.create({ index }))
        .then(card => card.createI18n({ language, name, typeStr })));

      it('should be an instance of Card', () => Card.findOne({ where: { index } })
        .then((card) => {
          expect(card.dataValues).toBeInstanceOf(Object);
          expect(card.isNewRecord).toBe(false);


          expect(card.id).toMatch(/^.+-.+-.+-.+$/);
          expect(card.index).toBe(index);
          expect(card.createdAt).toBeInstanceOf(Date);
          expect(card.updatedAt).toBeInstanceOf(Date);
        }));

      it('should retrieve 1 Card', () => Card.findAll()
        .then((cards) => {
          expect(cards).toHaveLength(1);

          const [card] = cards;
          expect(card.index).toBe(index);
        }));

      it('should have 1 CardI18N', () => Card.findOne({ where: { index }, include: [{ model: CardI18N, as: 'i18n' }] })
        .then((card) => {
          expect(card.i18n).toHaveLength(1);

          const [i18n] = card.i18n;
          expect(i18n.language).toBe(language);
          expect(i18n.name).toBe(name);
          expect(i18n.typeStr).toBe(typeStr);
        }));

      it('should have i18n shortcut', () => Card.findOne({ where: { index }, include: [{ model: CardI18N, as: 'i18n' }] })
        .then(card => expect(card.getName(language)).toBe(name) || expect(card.getName('fr')).toBeNull()));
    });
  });
});
